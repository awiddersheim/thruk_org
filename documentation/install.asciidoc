---
layout: docs
title: Installation
---


== Installation

There are several ways of installing Thruk.

=== Labs Consol Repository
The https://labs.consol.de/repo/[Labs Repository] provides packages of
latest Thruk releases (including daily development builds) and other
Tools like Mod-Gearman. Just follow the guide on the labs page for
your distribution.


=== OMD
An easy way of installing Thruk is using OMD from
http://omdistro.org[omdistro.org]. There are Debian, Ubuntu, Centos
and Suse Packages containing preconfigured latest versions of Nagios
and Thruk. The package also includes Icinga, Shinken, pnp4nagios,
check_mk and Nagvis. OMD is the recommended way of installing new
Nagios / Thruk setups when you want to install several addons at once.


=== Use Packages
Standalone installation from a binary package is another easy way
to get Thruk running.

Download packages from http://www.thruk.org/files/pkg/

All packages have the following filesystem structure:

-------
  /etc/thruk                       Thruks config
  /etc/httpd/conf.d/thruk.conf     Apache config
  /usr/share/thruk                 shared files
  /usr/lib/thruk/perl5             Perl libraries
  /var/cache/thruk                 temporary files
  /var/lib/thruk                   stored user settings
-------

After installation, Thruk is available at http://your-host/thruk/ and
has a default user 'thrukadmin' with password 'thrukadmin' configured.
You may need to change backend configuration. This should be done in
the thruk_local.conf where all settings can be overridden.



==== Debian / Ubuntu

-------
  #> dpkg -i thruk_1.84_debian6_amd64.deb
-------

In case of dependency errors, run 'apt-get -f install' and try the
'dpkg -i...' again.


==== Centos / Redhat

-------
  #> yum install --nogpgcheck thruk-1.84-1.rhel6.x86_64.rpm
-------

You may need to include an external repository for mod_fastcgi module.
Epel or Rpmforge should do it.


==== SLES

-------
  #> zypper install thruk-1.84-1.sles11.x86_64.rpm
-------

You may need the SLES sdk dvd for additional dependencies.



=== Install from Source
==== Installation Steps
===== Requirements

[IMPORTANT]
.Experienced Users Only
=======
Source installation is for experienced users only. Using
packages/repositories should be the preferred solution in almost all
situations. Especially for production environments.
=======


In order to install the Thruk Monitoring Webinterface from source you
will need the following:

- Perl
- Git Client
- compiler tools: automake, make, g++, gcc
- Apache Webserver (optional for fastcgi only)

===== Create New User
refer to your systems manual on how to add new user.
This guide uses the following:

-------
  user:  thruk
  group: thruk
-------


IMPORTANT: all following steps should be done by the thruk user.

===== Install Local::Lib


Follow the steps on http://search.cpan.org/perldoc?local::lib#The_bootstrapping_technique

quick guide:

-------
  %> su - thruk
  %> wget %http://search.cpan.org/CPAN/authors/id/A/AP/APEIRON/local-lib-1.008004.tar.gz
  %> tar zxf local-lib-1.008004.tar.gz
  %> cd local-lib-1.008004
  %> perl Makefile.PL --bootstrap && make install
-------

[TIP]
.proxy configuration
=======
if you need a proxy configuration, you should answer <no> at this question:

 Would you like me to configure as much as possible automatically? [yes]

Setting a proper http_proxy/ftp_proxy environment should work for the automatic
configuration.
=======


Add the following line to the thruk users .profile or .bashrc

 eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)

logout and login again and verify that your perl env looks like this:

-------
 %> env | grep perl
 PERL5LIB=/home/thruk/perl5/lib/perl5:/home/thruk/perl5/lib/perl5/x86_64-linux-gnu-thread-multi
 MODULEBUILDRC=/home/thruk/perl5/.modulebuildrc
 PATH=/home/thruk/perl5/bin:/usr/local/bin:/usr/bin:/bin:/usr/games
 PERL_MM_OPT=INSTALL_BASE=/home/thruk/perl5
-------


===== Install Module::Install
-------
  perl -MCPAN -e 'install Module::Install::Catalyst'
-------


===== Git Clone Thruk

-------
    git clone https://github.com/sni/Thruk.git
    cd Thruk
    perl Makefile.PL
-------

press <enter> here:
-------
  ==> Auto-install the 35 mandatory module(s) from CPAN? [y]
-------

then run make
-------
    make
-------

This may take a while, as there are probably several modules missing.


[TIP]
.yes
=======
you can use /usr/bin/yes to automatically answer all questions with
yes. (yes | make)
=======


Press <y> at this questions:
-------
  Do you want to build the XS Stash module? [y]
  Do you want to use the XS Stash by default? [y]
-------

run perl Makefile.PL again to see if all dependencies are now installed properly.

-------
    perl Makefile.PL
-------


===== Configuration

Copy 'thruk.conf' to 'thruk_local.conf' and adjust the livestatus settings to your needs.
-------
  %> cp thruk.conf thruk_local.conf
-------
The thruk.conf will be overwritten with new defaults on updates. The
thruk_local.conf contains the local overrides and will never be
overwritten.


Edit 'cgi.conf' and adjust settings to your needs.

See the link:configuration.html[Thruk Configuration] section for detailed explanation of configuration options.



===== Start Server
After running these steps successfully, you should be able to test your
installation:

-------
    ./script/thruk_server.pl
-------

Open your browser and open http://<your_host>:3000




== Apache Configuration

[TIP]
.apache is preconfigured when using packages
=======
Apache configuration is not needed if you use OMD or packages. Apache
is already preconfigured in that case.
=======

Integration in the Apache webserver is done by fastcgi.  There are two
fastcgi modules for Apache at the moment. Choose the one which fits
best into your environment. If unsure, use <<mod_fcgid,mod_fcgid>>.
The main difference is, that mod_fcgid starts the fastcgi process upon
the first request whereas in mod_fastcgi you have to start the fastcgi
process by yourself.

Do not use the port 3000 thruk server in production, it's only for
testing and development. It cannot handle authentication and is slower
than the fastcgi variants.


[TIP]
.lighthttpd
=======
Francois Ponsard wrote an article on how to integrate Thruk in Lighthttpd:
http://www.dahwa.fr/dotclear/index.php?post/2011/03/15/Thruk-in-Lighttpd
=======


=== mod_fcgid

IMPORTANT: Thruk runs with the webserver user in this scenario, make
sure the webserver user has access to all Thruk files and perl modules.

.Apache configuration with mod_fcgid
-------
LoadModule fcgid_module /usr/lib/apache2/modules/mod_fcgid.so
<VirtualHost *:80>
    ServerName   thruk.company.local

    DocumentRoot /home/thruk/Thruk/root/
    CustomLog    /home/thruk/Thruk/logs/access.log combined
    ErrorLog     /home/thruk/Thruk/logs/error.log

    <Directory /home/thruk/Thruk/root/>
        Options FollowSymLinks
        AllowOverride All
        order allow,deny
        allow from all
    </Directory>

    AliasMatch /thruk/(.*\.cgi|.*\.html)  /home/thruk/Thruk/script/thruk_fastcgi.pl/thruk/$1
    <Location /thruk>
        Options ExecCGI
        Order allow,deny
        Allow from all
        AuthName "Monitoring Access"
        AuthType Basic
        AuthUserFile /home/thruk/Thruk/htpasswd.users
        Require valid-user
    </Location>

    <IfModule mod_fcgid.c>
      AddHandler fcgid-script .pl
      MaxRequestsPerProcess 100
    </IfModule>

</VirtualHost>
-------

[TIP]
.Example
Another more complicated example can be found on github:
https://github.com/sni/Thruk/blob/master/support/apache_fcgid.conf[apache_fcgid.conf].
This file is used for the official Thruk packages.



=== mod_fastcgi

start your fcgi server:

-------
    %>./script/thruk_fastcgi.pl -n 5 \
                -l /tmp/thruk_fastcgi.socket \
                -p /tmp/thruk_fastcgi.pid
-------

you may want to copy the init.d script to /etc/init.d and adjust its paths:
-------
    %> sudo cp ./script/thruk_fastcgi_server.sh /etc/init.d/thruk_fastcgi_server
    %> vi /etc/init.d/thruk_fastcgi_server
    %> sudo chown root: /etc/init.d/thruk_fastcgi_server
-------

Or create a custom init.d script (additional modules required) with:
-------
    %> ./script/thruk_create.pl FastCGI::ExternalServer l=/tmp/thruk_fastcgi.socket n=5 p=/tmp/thruk_fastcgi.pid
-------



use this apache example configuration:

- replace /home/thruk/Thruk with your installation path
- replace your-web-host.local with your hostname
- create a /home/thruk/Thruk/htpasswd.users with htpasswd2
- make sure the /home/thruk/Thruk/logs/ directory exists


.Apache configuration within existing vhost
-------
<VirtualHost *:80>
    # ... existing configuration

    # thruk configuration
    <Directory /home/thruk/Thruk/root/>
        order allow,deny
        allow from all
        Options FollowSymLinks
        AllowOverride All
    </Directory>
    <Directory /home/thruk/Thruk/plugins/>
        order allow,deny
        allow from all
        Options FollowSymLinks
        AllowOverride All
    </Directory>

    Alias /thruk/ /home/thruk/Thruk/root/thruk/

    # authorization
    <Location "/thruk">
        AuthName "Monitoring Access"
        AuthType Basic
        AuthUserFile /home/thruk/Thruk/htpasswd.users
        Order Allow,Deny
        Allow from all
        require valid-user
    </Location>

    # Load fastcgi module unless already loaded
    LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so

    # fastcgi configuration
    FastCGIExternalServer /tmp/thruk_fastcgi.fcgi -socket /tmp/thruk_fastcgi.socket -idle-timeout 120

    # Load rewrite module unless already loaded
    LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so

    # rewrite configuration
    RewriteEngine On
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^/thruk(.*)$ /tmp/thruk_fastcgi.fcgi/thruk$1 [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},QSA,L]

</VirtualHost>
-------


.Apache configuration with own vhost
-------
<VirtualHost *:80>
    ServerName   thruk.your-host.local

    DocumentRoot /home/thruk/Thruk/root/
    CustomLog    /home/thruk/Thruk/logs/access.log combined
    ErrorLog     /home/thruk/Thruk/logs/error.log

    <Directory />
        order deny,allow
        deny from all
    </Directory>

    <Directory /home/thruk/Thruk/root/>
        Options FollowSymLinks
        AllowOverride All
        order allow,deny
        allow from all
    </Directory>
    <Directory /home/thruk/Thruk/plugins/>
        order allow,deny
        allow from all
        Options FollowSymLinks
        AllowOverride All
    </Directory>

    # authorization
    <Location "/">
        AuthName "Monitoring Access"
        AuthType Basic
        AuthUserFile /home/thruk/Thruk/htpasswd.users
        Order Allow,Deny
        Allow from all
        require valid-user
    </Location>

    # Load fastcgi module unless already loaded
    LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so

    # fastcgi configuration
    FastCGIExternalServer /tmp/thruk_fastcgi.fcgi -socket /tmp/thruk_fastcgi.socket -idle-timeout 120

    # Load rewrite module unless already loaded
    LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so

    # rewrite configuration
    RewriteEngine On
    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^/(.*)$ /tmp/thruk_fastcgi.fcgi/$1 [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},QSA,L]
</VirtualHost>
-------





== Backend Configuration

You may connect multiple backends into one Thruk interface. Just specify
multiple 'peer' items.

=== Livestatus

Livestatus is a addon for Naemon, Nagios or Icinga which provides real time
status data. Contrary to database addons it adds very little overhead to the
Naemon core which makes livestatus based gui fast and real time.

[TIP]
.Shinken
=======
Shinken has livestatus support built-in and does not require additional
modules.
=======

Refer to http://mathias-kettner.de/checkmk_livestatus.html#H1:%20Setting%20up%20and%20using%20Livestatus
on how to install livestatus onto your monitoring box. The
<<labs-consol-repository,Lab Consol Repository>> has livestatus rpm
packages. For debian based Linux systems just use the provided
packages of your distribution.

Basically you have to build the NEB module and add it to your naemon.cfg,
nagios.cfg or icinga.cfg.

-------
 broker_module=/opt/local/livestatus/livestatus.o /tmp/live.sock
-------

Then use the socket as 'peer' parameter in your backend configuration.

.Thruk Backends
image:source/backends.png[Thruk Backends Manager]

.Livestatus Architecture
image:source/livestatus.png[Livestatus Architecture]



=== HTTP

A HTTP connection is possible between multiple Thruk installations. A
HTTP connection not only makes live data available, it also offers a
secure way to manage object configuration from remote. To authenticate
the central Thruk installation, you need to provide the secret key from the
slave instance. This setup is perfect for managing several independent
installations from a central point of view.

[TIP]
.use SSL
=======
It's strongly recommended to use HTTPS for remote connections.
=======

-------
    # package installation
    %> cat /var/lib/thruk/secret.key

    # omd site
    OMD[site]:~$ cat var/thruk/secret.key
-------

.HTTP Architecture
image:source/livestatus_http.png[HTTP Architecture]



=== MongoDB
The MongoDB is not a real backend for status data, but it can be used as a
logfile cache. If unsure whether to use MongoDB or MySQL, use MySQL which is
newer and faster. The MongoDB logfile cache may be deprecated in the future.

ex.:

  logcache = mongodb://localhost:27017/thruk_logs

Details are explained in the link:logfile-cache.html[Logfile Cache] section.


=== MySQL
The MySQL Database is not a real backend for status data, but it can be used as a
logfile cache. If unsure whether to use MongoDB or MySQL, use MySQL which is
newer and faster. The MongoDB logfile cache may be deprecated in the future.

ex.:

  logcache = mysql://username:password@localhost:3306/thruk_logs

Details are explained in the link:logfile-cache.html[Logfile Cache] section.
